[{"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\index.js":"1","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\reportWebVitals.js":"2","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\App.js":"3","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\Home.jsx":"4","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppState.js":"5","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppReducer.js":"6","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppContext.js":"7","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\types.js":"8","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\HomeLanding.jsx":"9","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\Preloader.jsx":"10","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\ChatBoxUI.jsx":"11","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\CreateRoomModal.jsx":"12","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\AllRoomsModal.jsx":"13"},{"size":478,"mtime":1608135555755,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":479,"mtime":1609061779157,"results":"17","hashOfConfig":"15"},{"size":1693,"mtime":1610142471686,"results":"18","hashOfConfig":"15"},{"size":2599,"mtime":1610142331102,"results":"19","hashOfConfig":"15"},{"size":1046,"mtime":1609972703783,"results":"20","hashOfConfig":"15"},{"size":109,"mtime":1608152704068,"results":"21","hashOfConfig":"15"},{"size":523,"mtime":1609972609383,"results":"22","hashOfConfig":"15"},{"size":862,"mtime":1609862626096,"results":"23","hashOfConfig":"15"},{"size":341,"mtime":1608206327418,"results":"24","hashOfConfig":"15"},{"size":3573,"mtime":1610204197662,"results":"25","hashOfConfig":"15"},{"size":1149,"mtime":1609866568990,"results":"26","hashOfConfig":"15"},{"size":1722,"mtime":1610209151519,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"18t88mb",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\index.js",[],["60","61"],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\reportWebVitals.js",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\App.js",["62"],"import React, { useEffect } from 'react';\nimport AppState from './appContext/AppState';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <AppState>\n      <Router>\n        <div className='App'>\n          <Switch>\n            <Route exact path='/' component={Home} />\n          </Switch>\n        </div>\n      </Router>\n    </AppState>\n  );\n}\n\nexport default App;\n","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\Home.jsx",["63"],"import React, { useContext, useEffect, Fragment } from 'react';\r\nimport ChatBoxUI from '../components/ChatBoxUI';\r\n\r\nimport HomeLanding from './HomeLanding';\r\nimport AppContext from '../appContext/AppContext';\r\nimport {\r\n  ToastsContainer,\r\n  ToastsStore,\r\n  ToastsContainerPosition,\r\n} from 'react-toasts';\r\n\r\nconst Home = () => {\r\n  const appContext = useContext(AppContext);\r\n  const {\r\n    createRoom,\r\n    loading,\r\n    loadMessages,\r\n    user,\r\n    joinRoom,\r\n    rooms,\r\n    getAllRooms,\r\n    readMessage,\r\n    sendMessage,\r\n    fetchMessages,\r\n    messages,\r\n  } = appContext;\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      console.log('Latitude is :', position.coords.latitude);\r\n      console.log('Longitude is :', position.coords.longitude);\r\n    });\r\n    loadMessages();\r\n  }, [user]);\r\n  console.log(messages);\r\n\r\n  const userCreated = localStorage.getItem('user');\r\n  if (userCreated) {\r\n    return (\r\n      <Fragment>\r\n        <ChatBoxUI\r\n          fetchMessages={fetchMessages}\r\n          messages={messages}\r\n          sendMessage={sendMessage}\r\n          readMessage={readMessage}\r\n        />\r\n        <ToastsContainer\r\n          store={ToastsStore}\r\n          position={ToastsContainerPosition.TOP_CENTER}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <HomeLanding\r\n        joinRoom={joinRoom}\r\n        loading={loading}\r\n        getAllRooms={getAllRooms}\r\n        createRoom={createRoom}\r\n        rooms={rooms}\r\n      />\r\n      <ToastsContainer\r\n        store={ToastsStore}\r\n        position={ToastsContainerPosition.TOP_CENTER}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppState.js",["64","65"],"import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport AppContext from './AppContext';\r\nimport AppReducer from './AppReducer';\r\n\r\nimport {\r\n  CREATE_ROOM,\r\n  CLEAR_ERROR,\r\n  FETCH_ROOMS,\r\n  SET_LOADING,\r\n  READ_MESSAGES,\r\n} from './types';\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    error: null,\r\n    user: null,\r\n    rooms: null,\r\n    loading: null,\r\n    messages: [],\r\n    roomData: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  const socket = io('http://localhost:8080');\r\n\r\n  const loadMessages = async () => {\r\n    socket.on('connection', (connection) => {\r\n      console.log('connected');\r\n    });\r\n\r\n    socket.on('user_room_created', ({ roomName, userName, roomID }) => {\r\n      console.log(userName);\r\n      localStorage.setItem('user', userName);\r\n      localStorage.setItem('room', roomName);\r\n      localStorage.setItem('roomID', roomID);\r\n      dispatch({ type: CREATE_ROOM });\r\n    });\r\n    socket.on('rooms-fected', (data) => {\r\n      // console.log(data);\r\n      dispatch({ type: FETCH_ROOMS, payload: data });\r\n    });\r\n  };\r\n\r\n  const readMessage = () => {\r\n    socket.on('readMessage', (messages) => {\r\n      dispatch({ type: READ_MESSAGES, payload: messages });\r\n    });\r\n  };\r\n\r\n  const sendMessage = async (messageObject, roomID) => {\r\n    console.log(roomID);\r\n    socket.emit('send_message', { messageObject, roomID });\r\n  };\r\n\r\n  const getAllRooms = async (longitude, latitude) => {\r\n    console.log(longitude, latitude);\r\n    socket.emit('getRooms', { longitude, latitude });\r\n  };\r\n\r\n  const fetchMessages = () => {\r\n    socket.emit('fetchMessages', localStorage.getItem('roomID'));\r\n  };\r\n\r\n  const joinRoom = async (lon, lat) => {\r\n    socket.emit('joinRoom', { lon, lat });\r\n  };\r\n\r\n  const setLoading = () => {\r\n    return dispatch({ type: SET_LOADING });\r\n  };\r\n\r\n  const createRoom = async (roomName, lon, lat) => {\r\n    socket.emit('createRoom', { roomName, lon, lat });\r\n  };\r\n\r\n  const clearError = () => {\r\n    dispatch({ type: CLEAR_ERROR });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        messages: state.messages,\r\n        error: state.error,\r\n        rooms: state.rooms,\r\n        loading: state.loading,\r\n        readMessage,\r\n        fetchMessages,\r\n        sendMessage,\r\n        joinRoom,\r\n        getAllRooms,\r\n        loadMessages,\r\n        createRoom,\r\n        clearError,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppState;\r\n","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppReducer.js",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\AppContext.js",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\appContext\\types.js",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\HomeLanding.jsx",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\Preloader.jsx",[],["66","67"],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\ChatBoxUI.jsx",["68","69","70","71","72","73"],"import React, { useState, useEffect } from 'react';\r\nimport ChatBox, { ChatFrame } from 'react-chat-plugin';\r\nimport BeforeUnloadComponent from 'react-beforeunload-component';\r\nimport logo from '../assets/logo.png';\r\n\r\nconst ChatBoxUI = ({ sendMessage, fetchMessages, messages, readMessage }) => {\r\n  useEffect(() => {\r\n    fetchMessages();\r\n  }, []);\r\n  useEffect(() => {\r\n    readMessage();\r\n  });\r\n  const [createInput, setCreateInput] = useState('');\r\n  const onChange = (e) => {\r\n    setCreateInput(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (createInput.length === 0) {\r\n      return alert('Please enter a message');\r\n    } else {\r\n      const userName = localStorage.getItem('user');\r\n      const roomName = localStorage.getItem('room');\r\n      const message = createInput;\r\n      const messageObject = {\r\n        userName,\r\n        roomName,\r\n        message,\r\n      };\r\n      sendMessage(messageObject, localStorage.getItem('roomID'));\r\n      setCreateInput('');\r\n    }\r\n  };\r\n  console.log(messages);\r\n\r\n  //convert message object into an array\r\n  let messagesArray = [\r\n    {\r\n      text: 'user2 has joined the conversation',\r\n      timestamp: 1578366389250,\r\n      type: 'notification',\r\n    },\r\n  ];\r\n  for (let msg in messages) {\r\n    messagesArray.push({\r\n      author: {\r\n        username: messages[msg].userName,\r\n        id: localStorage.getItem('user') === messages[msg].userName ? 1 : 2,\r\n        avatarUrl: null,\r\n      },\r\n      text: messages[msg].message,\r\n      type: 'text',\r\n      timestamp: 1578366425250,\r\n    });\r\n  }\r\n  console.log(messagesArray);\r\n\r\n  // messages[room]\r\n  let messageData = [\r\n    {\r\n      text: 'user2 has joined the conversation',\r\n      timestamp: 1578366389250,\r\n      type: 'notification',\r\n    },\r\n    {\r\n      author: { username: 'user2', id: 2, avatarUrl: null },\r\n      text: 'Show two buttons',\r\n      type: 'text',\r\n      timestamp: 1578366425250,\r\n    },\r\n  ];\r\n  const handleOnSendMessage = (message) => {\r\n    if (message.length === 0) {\r\n      return alert('Please enter a message');\r\n    } else {\r\n      const userName = localStorage.getItem('user');\r\n      const roomName = localStorage.getItem('room');\r\n      const messageObject = {\r\n        userName,\r\n        roomName,\r\n        message,\r\n      };\r\n      sendMessage(messageObject, localStorage.getItem('roomID'));\r\n    }\r\n  };\r\n  let messagesObject = [];\r\n  return (\r\n    <BeforeUnloadComponent\r\n      blockRoute={true}\r\n      alertMessage={'You will be disconnected when tab closes or reloads'}\r\n    >\r\n      <div className='chat-wrapper'>\r\n        <div className='chat-header'>\r\n          <div className='logo'>\r\n            <img src={logo} alt='' srcset='' />\r\n          </div>\r\n          <div className='room-name'>\r\n            <h1>{localStorage.getItem('room')}</h1>\r\n          </div>\r\n          <div className='options'>\r\n            <button\r\n              onClick={() => {\r\n                localStorage.removeItem('user');\r\n                localStorage.removeItem('room');\r\n                window.location.reload();\r\n              }}\r\n            >\r\n              Leave Room\r\n            </button>\r\n            <button>Destroy Room</button>\r\n          </div>\r\n        </div>\r\n        <div className='chat-holder'>\r\n          <ChatBox\r\n            messages={messagesArray}\r\n            userId={1}\r\n            onSendMessage={handleOnSendMessage}\r\n            width={'900px'}\r\n            height={'80vh'}\r\n          />\r\n        </div>\r\n      </div>\r\n    </BeforeUnloadComponent>\r\n  );\r\n};\r\n\r\nexport default ChatBoxUI;\r\n","C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\CreateRoomModal.jsx",[],"C:\\Users\\George\\Desktop\\work\\React\\Rchat\\client\\src\\components\\AllRoomsModal.jsx",["74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"83","severity":1,"message":"84","line":33,"column":6,"nodeType":"85","endLine":33,"endColumn":12,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"87","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":13},{"ruleId":"79","severity":1,"message":"88","line":71,"column":9,"nodeType":"81","messageId":"82","endLine":71,"endColumn":19},{"ruleId":"75","replacedBy":"89"},{"ruleId":"77","replacedBy":"90"},{"ruleId":"79","severity":1,"message":"91","line":2,"column":19,"nodeType":"81","messageId":"82","endLine":2,"endColumn":28},{"ruleId":"83","severity":1,"message":"92","line":9,"column":6,"nodeType":"85","endLine":9,"endColumn":8,"suggestions":"93"},{"ruleId":"79","severity":1,"message":"94","line":14,"column":9,"nodeType":"81","messageId":"82","endLine":14,"endColumn":17},{"ruleId":"79","severity":1,"message":"95","line":18,"column":9,"nodeType":"81","messageId":"82","endLine":18,"endColumn":26},{"ruleId":"79","severity":1,"message":"96","line":59,"column":7,"nodeType":"81","messageId":"82","endLine":59,"endColumn":18},{"ruleId":"79","severity":1,"message":"97","line":86,"column":7,"nodeType":"81","messageId":"82","endLine":86,"endColumn":21},{"ruleId":"83","severity":1,"message":"98","line":12,"column":6,"nodeType":"85","endLine":12,"endColumn":8,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMessages'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'axios' is defined but never used.","'setLoading' is assigned a value but never used.",["100"],["101"],"'ChatFrame' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array. If 'fetchMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"'onChange' is assigned a value but never used.","'handleSendMessage' is assigned a value but never used.","'messageData' is assigned a value but never used.","'messagesObject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllRooms'. Either include it or remove the dependency array. If 'getAllRooms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["104"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [loadMessages, user]",{"range":"111","text":"112"},"Update the dependencies array to be: [fetchMessages]",{"range":"113","text":"114"},"Update the dependencies array to be: [getAllRooms]",{"range":"115","text":"116"},[838,844],"[loadMessages, user]",[347,349],"[fetchMessages]",[413,415],"[getAllRooms]"]